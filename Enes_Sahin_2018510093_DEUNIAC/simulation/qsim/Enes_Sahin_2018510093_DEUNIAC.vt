// Copyright (C) 1991-2013 Altera Corporation
// Your use of Altera Corporation's design tools, logic functions 
// and other software and tools, and its AMPP partner logic 
// functions, and any output files from any of the foregoing 
// (including device programming or simulation files), and any 
// associated documentation or information are expressly subject 
// to the terms and conditions of the Altera Program License 
// Subscription Agreement, Altera MegaCore Function License 
// Agreement, or other applicable license agreement, including, 
// without limitation, that your use is for the sole purpose of 
// programming logic devices manufactured by Altera and sold by 
// Altera or its authorized distributors.  Please refer to the 
// applicable agreement for further details.

// *****************************************************************************
// This file contains a Verilog test bench with test vectors .The test vectors  
// are exported from a vector file in the Quartus Waveform Editor and apply to  
// the top level entity of the current Quartus project .The user can use this   
// testbench to simulate his design using a third-party simulation tool .       
// *****************************************************************************
// Generated on "06/23/2021 01:17:34"
                                                                        
// Verilog Self-Checking Test Bench (with test vectors) for design :    Enes_Sahin_2018510093_DEUNIAC
// 
// Simulation tool : 3rd Party
// 

`timescale 1 ps/ 1 ps
module Enes_Sahin_2018510093_DEUNIAC_vlg_sample_tst(
	clk,
	input_InpR,
	sampler_tx
);
input  clk;
input [3:0] input_InpR;
output sampler_tx;

reg sample;
time current_time;
always @(clk or input_InpR)
                                                                                
begin                                                 
 if ($realtime > 0)                                   
 begin                                                
	if ($realtime == 0 || $realtime != current_time)  
	begin									          
		if (sample === 1'bx)                          
			sample = 0;                               
		else                                          
			sample = ~sample;                         
	end										          
	current_time = $realtime;					      
 end                                                  
end                                                   

assign sampler_tx = sample;
endmodule

module Enes_Sahin_2018510093_DEUNIAC_vlg_check_tst (
	ALU_OPR,
	AR_load,
	BUS_data_sel,
	BUS_sel,
	D0,
	D1,
	D2,
	D3,
	D4,
	D5,
	D6,
	D7,
	D8,
	D9,
	D10,
	D11,
	D12,
	D13,
	D14,
	D15,
	DM_read,
	DM_write,
	InpR_out,
	IR_load,
	out_alu,
	out_AR,
	out_BUS,
	out_DM,
	out_IM,
	out_IR,
	out_PC,
	out_SC,
	out_SM,
	out_SP,
	OutpR_out,
	OUTR_load,
	PC_count_en,
	Q,
	R0_ld,
	R0_out,
	R1_ld,
	R1_out,
	R2_ld,
	R2_out,
	SC_clear,
	T0,
	T1,
	T2,
	T3,
	T4,
	T5,
	T6,
	T7,
	V,
	sampler_rx
);
input [2:0] ALU_OPR;
input  AR_load;
input  BUS_data_sel;
input [1:0] BUS_sel;
input  D0;
input  D1;
input  D2;
input  D3;
input  D4;
input  D5;
input  D6;
input  D7;
input  D8;
input  D9;
input  D10;
input  D11;
input  D12;
input  D13;
input  D14;
input  D15;
input  DM_read;
input  DM_write;
input [3:0] InpR_out;
input  IR_load;
input [3:0] out_alu;
input [3:0] out_AR;
input [3:0] out_BUS;
input [3:0] out_DM;
input [10:0] out_IM;
input [10:0] out_IR;
input [4:0] out_PC;
input [2:0] out_SC;
input [4:0] out_SM;
input [3:0] out_SP;
input [3:0] OutpR_out;
input  OUTR_load;
input  PC_count_en;
input  Q;
input  R0_ld;
input [3:0] R0_out;
input  R1_ld;
input [3:0] R1_out;
input  R2_ld;
input [3:0] R2_out;
input  SC_clear;
input  T0;
input  T1;
input  T2;
input  T3;
input  T4;
input  T5;
input  T6;
input  T7;
input  V;
input sampler_rx;

reg [2:0] ALU_OPR_expected;
reg  AR_load_expected;
reg  BUS_data_sel_expected;
reg [1:0] BUS_sel_expected;
reg  D0_expected;
reg  D1_expected;
reg  D2_expected;
reg  D3_expected;
reg  D4_expected;
reg  D5_expected;
reg  D6_expected;
reg  D7_expected;
reg  D8_expected;
reg  D9_expected;
reg  D10_expected;
reg  D11_expected;
reg  D12_expected;
reg  D13_expected;
reg  D14_expected;
reg  D15_expected;
reg  DM_read_expected;
reg  DM_write_expected;
reg [3:0] InpR_out_expected;
reg  IR_load_expected;
reg [3:0] out_alu_expected;
reg [3:0] out_AR_expected;
reg [3:0] out_BUS_expected;
reg [3:0] out_DM_expected;
reg [10:0] out_IM_expected;
reg [10:0] out_IR_expected;
reg [4:0] out_PC_expected;
reg [2:0] out_SC_expected;
reg [4:0] out_SM_expected;
reg [3:0] out_SP_expected;
reg [3:0] OutpR_out_expected;
reg  OUTR_load_expected;
reg  PC_count_en_expected;
reg  Q_expected;
reg  R0_ld_expected;
reg [3:0] R0_out_expected;
reg  R1_ld_expected;
reg [3:0] R1_out_expected;
reg  R2_ld_expected;
reg [3:0] R2_out_expected;
reg  SC_clear_expected;
reg  T0_expected;
reg  T1_expected;
reg  T2_expected;
reg  T3_expected;
reg  T4_expected;
reg  T5_expected;
reg  T6_expected;
reg  T7_expected;
reg  V_expected;

reg [2:0] ALU_OPR_prev;
reg  AR_load_prev;
reg  BUS_data_sel_prev;
reg [1:0] BUS_sel_prev;
reg  D0_prev;
reg  D1_prev;
reg  D2_prev;
reg  D3_prev;
reg  D4_prev;
reg  D5_prev;
reg  D6_prev;
reg  D7_prev;
reg  D8_prev;
reg  D9_prev;
reg  D10_prev;
reg  D11_prev;
reg  D12_prev;
reg  D13_prev;
reg  D14_prev;
reg  D15_prev;
reg  DM_read_prev;
reg  DM_write_prev;
reg [3:0] InpR_out_prev;
reg  IR_load_prev;
reg [3:0] out_alu_prev;
reg [3:0] out_AR_prev;
reg [3:0] out_BUS_prev;
reg [3:0] out_DM_prev;
reg [10:0] out_IM_prev;
reg [10:0] out_IR_prev;
reg [4:0] out_PC_prev;
reg [2:0] out_SC_prev;
reg [4:0] out_SM_prev;
reg [3:0] out_SP_prev;
reg [3:0] OutpR_out_prev;
reg  OUTR_load_prev;
reg  PC_count_en_prev;
reg  Q_prev;
reg  R0_ld_prev;
reg [3:0] R0_out_prev;
reg  R1_ld_prev;
reg [3:0] R1_out_prev;
reg  R2_ld_prev;
reg [3:0] R2_out_prev;
reg  SC_clear_prev;
reg  T0_prev;
reg  T1_prev;
reg  T2_prev;
reg  T3_prev;
reg  T4_prev;
reg  T5_prev;
reg  T6_prev;
reg  T7_prev;
reg  V_prev;

reg [2:0] ALU_OPR_expected_prev;
reg  AR_load_expected_prev;
reg  BUS_data_sel_expected_prev;
reg [1:0] BUS_sel_expected_prev;
reg  D0_expected_prev;
reg  D1_expected_prev;
reg  D2_expected_prev;
reg  D3_expected_prev;
reg  D4_expected_prev;
reg  D5_expected_prev;
reg  D6_expected_prev;
reg  D7_expected_prev;
reg  D8_expected_prev;
reg  D9_expected_prev;
reg  D10_expected_prev;
reg  D11_expected_prev;
reg  D12_expected_prev;
reg  D13_expected_prev;
reg  D14_expected_prev;
reg  D15_expected_prev;
reg  DM_read_expected_prev;
reg  DM_write_expected_prev;
reg  IR_load_expected_prev;
reg [10:0] out_IM_expected_prev;
reg [10:0] out_IR_expected_prev;
reg  OUTR_load_expected_prev;
reg  PC_count_en_expected_prev;
reg  Q_expected_prev;
reg  R0_ld_expected_prev;
reg  R1_ld_expected_prev;
reg  R2_ld_expected_prev;
reg  SC_clear_expected_prev;
reg  T0_expected_prev;
reg  T1_expected_prev;
reg  T2_expected_prev;
reg  T3_expected_prev;
reg  T4_expected_prev;
reg  T5_expected_prev;
reg  T6_expected_prev;
reg  T7_expected_prev;

reg [2:0] last_ALU_OPR_exp;
reg  last_AR_load_exp;
reg  last_BUS_data_sel_exp;
reg [1:0] last_BUS_sel_exp;
reg  last_D0_exp;
reg  last_D1_exp;
reg  last_D2_exp;
reg  last_D3_exp;
reg  last_D4_exp;
reg  last_D5_exp;
reg  last_D6_exp;
reg  last_D7_exp;
reg  last_D8_exp;
reg  last_D9_exp;
reg  last_D10_exp;
reg  last_D11_exp;
reg  last_D12_exp;
reg  last_D13_exp;
reg  last_D14_exp;
reg  last_D15_exp;
reg  last_DM_read_exp;
reg  last_DM_write_exp;
reg  last_IR_load_exp;
reg [10:0] last_out_IM_exp;
reg [10:0] last_out_IR_exp;
reg  last_OUTR_load_exp;
reg  last_PC_count_en_exp;
reg  last_Q_exp;
reg  last_R0_ld_exp;
reg  last_R1_ld_exp;
reg  last_R2_ld_exp;
reg  last_SC_clear_exp;
reg  last_T0_exp;
reg  last_T1_exp;
reg  last_T2_exp;
reg  last_T3_exp;
reg  last_T4_exp;
reg  last_T5_exp;
reg  last_T6_exp;
reg  last_T7_exp;

reg trigger;

integer i;
integer nummismatches;

reg [1:54] on_first_change ;


initial
begin
trigger = 0;
i = 0;
nummismatches = 0;
on_first_change = 54'b1;
end

// update real /o prevs

always @(trigger)
begin
	ALU_OPR_prev = ALU_OPR;
	AR_load_prev = AR_load;
	BUS_data_sel_prev = BUS_data_sel;
	BUS_sel_prev = BUS_sel;
	D0_prev = D0;
	D1_prev = D1;
	D2_prev = D2;
	D3_prev = D3;
	D4_prev = D4;
	D5_prev = D5;
	D6_prev = D6;
	D7_prev = D7;
	D8_prev = D8;
	D9_prev = D9;
	D10_prev = D10;
	D11_prev = D11;
	D12_prev = D12;
	D13_prev = D13;
	D14_prev = D14;
	D15_prev = D15;
	DM_read_prev = DM_read;
	DM_write_prev = DM_write;
	InpR_out_prev = InpR_out;
	IR_load_prev = IR_load;
	out_alu_prev = out_alu;
	out_AR_prev = out_AR;
	out_BUS_prev = out_BUS;
	out_DM_prev = out_DM;
	out_IM_prev = out_IM;
	out_IR_prev = out_IR;
	out_PC_prev = out_PC;
	out_SC_prev = out_SC;
	out_SM_prev = out_SM;
	out_SP_prev = out_SP;
	OutpR_out_prev = OutpR_out;
	OUTR_load_prev = OUTR_load;
	PC_count_en_prev = PC_count_en;
	Q_prev = Q;
	R0_ld_prev = R0_ld;
	R0_out_prev = R0_out;
	R1_ld_prev = R1_ld;
	R1_out_prev = R1_out;
	R2_ld_prev = R2_ld;
	R2_out_prev = R2_out;
	SC_clear_prev = SC_clear;
	T0_prev = T0;
	T1_prev = T1;
	T2_prev = T2;
	T3_prev = T3;
	T4_prev = T4;
	T5_prev = T5;
	T6_prev = T6;
	T7_prev = T7;
	V_prev = V;
end

// update expected /o prevs

always @(trigger)
begin
	ALU_OPR_expected_prev = ALU_OPR_expected;
	AR_load_expected_prev = AR_load_expected;
	BUS_data_sel_expected_prev = BUS_data_sel_expected;
	BUS_sel_expected_prev = BUS_sel_expected;
	D0_expected_prev = D0_expected;
	D1_expected_prev = D1_expected;
	D2_expected_prev = D2_expected;
	D3_expected_prev = D3_expected;
	D4_expected_prev = D4_expected;
	D5_expected_prev = D5_expected;
	D6_expected_prev = D6_expected;
	D7_expected_prev = D7_expected;
	D8_expected_prev = D8_expected;
	D9_expected_prev = D9_expected;
	D10_expected_prev = D10_expected;
	D11_expected_prev = D11_expected;
	D12_expected_prev = D12_expected;
	D13_expected_prev = D13_expected;
	D14_expected_prev = D14_expected;
	D15_expected_prev = D15_expected;
	DM_read_expected_prev = DM_read_expected;
	DM_write_expected_prev = DM_write_expected;
	IR_load_expected_prev = IR_load_expected;
	out_IM_expected_prev = out_IM_expected;
	out_IR_expected_prev = out_IR_expected;
	OUTR_load_expected_prev = OUTR_load_expected;
	PC_count_en_expected_prev = PC_count_en_expected;
	Q_expected_prev = Q_expected;
	R0_ld_expected_prev = R0_ld_expected;
	R1_ld_expected_prev = R1_ld_expected;
	R2_ld_expected_prev = R2_ld_expected;
	SC_clear_expected_prev = SC_clear_expected;
	T0_expected_prev = T0_expected;
	T1_expected_prev = T1_expected;
	T2_expected_prev = T2_expected;
	T3_expected_prev = T3_expected;
	T4_expected_prev = T4_expected;
	T5_expected_prev = T5_expected;
	T6_expected_prev = T6_expected;
	T7_expected_prev = T7_expected;
end


// expected out_IM[ 10 ]
initial
begin
	out_IM_expected[10] = 1'bX;
end 
// expected out_IM[ 9 ]
initial
begin
	out_IM_expected[9] = 1'bX;
end 
// expected out_IM[ 8 ]
initial
begin
	out_IM_expected[8] = 1'bX;
end 
// expected out_IM[ 7 ]
initial
begin
	out_IM_expected[7] = 1'bX;
end 
// expected out_IM[ 6 ]
initial
begin
	out_IM_expected[6] = 1'bX;
end 
// expected out_IM[ 5 ]
initial
begin
	out_IM_expected[5] = 1'bX;
end 
// expected out_IM[ 4 ]
initial
begin
	out_IM_expected[4] = 1'bX;
end 
// expected out_IM[ 3 ]
initial
begin
	out_IM_expected[3] = 1'bX;
end 
// expected out_IM[ 2 ]
initial
begin
	out_IM_expected[2] = 1'bX;
end 
// expected out_IM[ 1 ]
initial
begin
	out_IM_expected[1] = 1'bX;
end 
// expected out_IM[ 0 ]
initial
begin
	out_IM_expected[0] = 1'bX;
end 
// expected out_IR[ 10 ]
initial
begin
	out_IR_expected[10] = 1'bX;
end 
// expected out_IR[ 9 ]
initial
begin
	out_IR_expected[9] = 1'bX;
end 
// expected out_IR[ 8 ]
initial
begin
	out_IR_expected[8] = 1'bX;
end 
// expected out_IR[ 7 ]
initial
begin
	out_IR_expected[7] = 1'bX;
end 
// expected out_IR[ 6 ]
initial
begin
	out_IR_expected[6] = 1'bX;
end 
// expected out_IR[ 5 ]
initial
begin
	out_IR_expected[5] = 1'bX;
end 
// expected out_IR[ 4 ]
initial
begin
	out_IR_expected[4] = 1'bX;
end 
// expected out_IR[ 3 ]
initial
begin
	out_IR_expected[3] = 1'bX;
end 
// expected out_IR[ 2 ]
initial
begin
	out_IR_expected[2] = 1'bX;
end 
// expected out_IR[ 1 ]
initial
begin
	out_IR_expected[1] = 1'bX;
end 
// expected out_IR[ 0 ]
initial
begin
	out_IR_expected[0] = 1'bX;
end 

// expected IR_load
initial
begin
	IR_load_expected = 1'bX;
end 

// expected AR_load
initial
begin
	AR_load_expected = 1'bX;
end 

// expected R0_ld
initial
begin
	R0_ld_expected = 1'bX;
end 

// expected R1_ld
initial
begin
	R1_ld_expected = 1'bX;
end 

// expected R2_ld
initial
begin
	R2_ld_expected = 1'bX;
end 

// expected OUTR_load
initial
begin
	OUTR_load_expected = 1'bX;
end 

// expected DM_read
initial
begin
	DM_read_expected = 1'bX;
end 

// expected DM_write
initial
begin
	DM_write_expected = 1'bX;
end 

// expected PC_count_en
initial
begin
	PC_count_en_expected = 1'bX;
end 

// expected Q
initial
begin
	Q_expected = 1'bX;
end 
// expected ALU_OPR[ 2 ]
initial
begin
	ALU_OPR_expected[2] = 1'bX;
end 
// expected ALU_OPR[ 1 ]
initial
begin
	ALU_OPR_expected[1] = 1'bX;
end 
// expected ALU_OPR[ 0 ]
initial
begin
	ALU_OPR_expected[0] = 1'bX;
end 
// expected BUS_sel[ 1 ]
initial
begin
	BUS_sel_expected[1] = 1'bX;
end 
// expected BUS_sel[ 0 ]
initial
begin
	BUS_sel_expected[0] = 1'bX;
end 

// expected BUS_data_sel
initial
begin
	BUS_data_sel_expected = 1'bX;
end 

// expected T0
initial
begin
	T0_expected = 1'bX;
end 

// expected T1
initial
begin
	T1_expected = 1'bX;
end 

// expected T2
initial
begin
	T2_expected = 1'bX;
end 

// expected T3
initial
begin
	T3_expected = 1'bX;
end 

// expected T4
initial
begin
	T4_expected = 1'bX;
end 

// expected T5
initial
begin
	T5_expected = 1'bX;
end 

// expected T6
initial
begin
	T6_expected = 1'bX;
end 

// expected T7
initial
begin
	T7_expected = 1'bX;
end 

// expected SC_clear
initial
begin
	SC_clear_expected = 1'bX;
end 

// expected D0
initial
begin
	D0_expected = 1'bX;
end 

// expected D1
initial
begin
	D1_expected = 1'bX;
end 

// expected D2
initial
begin
	D2_expected = 1'bX;
end 

// expected D3
initial
begin
	D3_expected = 1'bX;
end 

// expected D4
initial
begin
	D4_expected = 1'bX;
end 

// expected D5
initial
begin
	D5_expected = 1'bX;
end 

// expected D6
initial
begin
	D6_expected = 1'bX;
end 

// expected D7
initial
begin
	D7_expected = 1'bX;
end 

// expected D8
initial
begin
	D8_expected = 1'bX;
end 

// expected D9
initial
begin
	D9_expected = 1'bX;
end 

// expected D10
initial
begin
	D10_expected = 1'bX;
end 

// expected D11
initial
begin
	D11_expected = 1'bX;
end 

// expected D12
initial
begin
	D12_expected = 1'bX;
end 

// expected D13
initial
begin
	D13_expected = 1'bX;
end 

// expected D14
initial
begin
	D14_expected = 1'bX;
end 

// expected D15
initial
begin
	D15_expected = 1'bX;
end 
// generate trigger
always @(ALU_OPR_expected or ALU_OPR or AR_load_expected or AR_load or BUS_data_sel_expected or BUS_data_sel or BUS_sel_expected or BUS_sel or D0_expected or D0 or D1_expected or D1 or D2_expected or D2 or D3_expected or D3 or D4_expected or D4 or D5_expected or D5 or D6_expected or D6 or D7_expected or D7 or D8_expected or D8 or D9_expected or D9 or D10_expected or D10 or D11_expected or D11 or D12_expected or D12 or D13_expected or D13 or D14_expected or D14 or D15_expected or D15 or DM_read_expected or DM_read or DM_write_expected or DM_write or InpR_out_expected or InpR_out or IR_load_expected or IR_load or out_alu_expected or out_alu or out_AR_expected or out_AR or out_BUS_expected or out_BUS or out_DM_expected or out_DM or out_IM_expected or out_IM or out_IR_expected or out_IR or out_PC_expected or out_PC or out_SC_expected or out_SC or out_SM_expected or out_SM or out_SP_expected or out_SP or OutpR_out_expected or OutpR_out or OUTR_load_expected or OUTR_load or PC_count_en_expected or PC_count_en or Q_expected or Q or R0_ld_expected or R0_ld or R0_out_expected or R0_out or R1_ld_expected or R1_ld or R1_out_expected or R1_out or R2_ld_expected or R2_ld or R2_out_expected or R2_out or SC_clear_expected or SC_clear or T0_expected or T0 or T1_expected or T1 or T2_expected or T2 or T3_expected or T3 or T4_expected or T4 or T5_expected or T5 or T6_expected or T6 or T7_expected or T7 or V_expected or V)
begin
	trigger <= ~trigger;
end

always @(posedge sampler_rx or negedge sampler_rx)
begin
`ifdef debug_tbench
	$display("Scanning pattern %d @time = %t",i,$realtime );
	i = i + 1;
	$display("| expected ALU_OPR = %b | expected AR_load = %b | expected BUS_data_sel = %b | expected BUS_sel = %b | expected D0 = %b | expected D1 = %b | expected D2 = %b | expected D3 = %b | expected D4 = %b | expected D5 = %b | expected D6 = %b | expected D7 = %b | expected D8 = %b | expected D9 = %b | expected D10 = %b | expected D11 = %b | expected D12 = %b | expected D13 = %b | expected D14 = %b | expected D15 = %b | expected DM_read = %b | expected DM_write = %b | expected InpR_out = %b | expected IR_load = %b | expected out_alu = %b | expected out_AR = %b | expected out_BUS = %b | expected out_DM = %b | expected out_IM = %b | expected out_IR = %b | expected out_PC = %b | expected out_SC = %b | expected out_SM = %b | expected out_SP = %b | expected OutpR_out = %b | expected OUTR_load = %b | expected PC_count_en = %b | expected Q = %b | expected R0_ld = %b | expected R0_out = %b | expected R1_ld = %b | expected R1_out = %b | expected R2_ld = %b | expected R2_out = %b | expected SC_clear = %b | expected T0 = %b | expected T1 = %b | expected T2 = %b | expected T3 = %b | expected T4 = %b | expected T5 = %b | expected T6 = %b | expected T7 = %b | expected V = %b | ",ALU_OPR_expected_prev,AR_load_expected_prev,BUS_data_sel_expected_prev,BUS_sel_expected_prev,D0_expected_prev,D1_expected_prev,D2_expected_prev,D3_expected_prev,D4_expected_prev,D5_expected_prev,D6_expected_prev,D7_expected_prev,D8_expected_prev,D9_expected_prev,D10_expected_prev,D11_expected_prev,D12_expected_prev,D13_expected_prev,D14_expected_prev,D15_expected_prev,DM_read_expected_prev,DM_write_expected_prev,InpR_out_expected_prev,IR_load_expected_prev,out_alu_expected_prev,out_AR_expected_prev,out_BUS_expected_prev,out_DM_expected_prev,out_IM_expected_prev,out_IR_expected_prev,out_PC_expected_prev,out_SC_expected_prev,out_SM_expected_prev,out_SP_expected_prev,OutpR_out_expected_prev,OUTR_load_expected_prev,PC_count_en_expected_prev,Q_expected_prev,R0_ld_expected_prev,R0_out_expected_prev,R1_ld_expected_prev,R1_out_expected_prev,R2_ld_expected_prev,R2_out_expected_prev,SC_clear_expected_prev,T0_expected_prev,T1_expected_prev,T2_expected_prev,T3_expected_prev,T4_expected_prev,T5_expected_prev,T6_expected_prev,T7_expected_prev,V_expected_prev);
	$display("| real ALU_OPR = %b | real AR_load = %b | real BUS_data_sel = %b | real BUS_sel = %b | real D0 = %b | real D1 = %b | real D2 = %b | real D3 = %b | real D4 = %b | real D5 = %b | real D6 = %b | real D7 = %b | real D8 = %b | real D9 = %b | real D10 = %b | real D11 = %b | real D12 = %b | real D13 = %b | real D14 = %b | real D15 = %b | real DM_read = %b | real DM_write = %b | real InpR_out = %b | real IR_load = %b | real out_alu = %b | real out_AR = %b | real out_BUS = %b | real out_DM = %b | real out_IM = %b | real out_IR = %b | real out_PC = %b | real out_SC = %b | real out_SM = %b | real out_SP = %b | real OutpR_out = %b | real OUTR_load = %b | real PC_count_en = %b | real Q = %b | real R0_ld = %b | real R0_out = %b | real R1_ld = %b | real R1_out = %b | real R2_ld = %b | real R2_out = %b | real SC_clear = %b | real T0 = %b | real T1 = %b | real T2 = %b | real T3 = %b | real T4 = %b | real T5 = %b | real T6 = %b | real T7 = %b | real V = %b | ",ALU_OPR_prev,AR_load_prev,BUS_data_sel_prev,BUS_sel_prev,D0_prev,D1_prev,D2_prev,D3_prev,D4_prev,D5_prev,D6_prev,D7_prev,D8_prev,D9_prev,D10_prev,D11_prev,D12_prev,D13_prev,D14_prev,D15_prev,DM_read_prev,DM_write_prev,InpR_out_prev,IR_load_prev,out_alu_prev,out_AR_prev,out_BUS_prev,out_DM_prev,out_IM_prev,out_IR_prev,out_PC_prev,out_SC_prev,out_SM_prev,out_SP_prev,OutpR_out_prev,OUTR_load_prev,PC_count_en_prev,Q_prev,R0_ld_prev,R0_out_prev,R1_ld_prev,R1_out_prev,R2_ld_prev,R2_out_prev,SC_clear_prev,T0_prev,T1_prev,T2_prev,T3_prev,T4_prev,T5_prev,T6_prev,T7_prev,V_prev);
`endif
	if (
		( ALU_OPR_expected_prev[0] !== 1'bx ) && ( ALU_OPR_prev[0] !== ALU_OPR_expected_prev[0] )
		&& ((ALU_OPR_expected_prev[0] !== last_ALU_OPR_exp[0]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OPR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OPR_expected_prev);
		$display ("     Real value = %b", ALU_OPR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OPR_exp[0] = ALU_OPR_expected_prev[0];
	end
	if (
		( ALU_OPR_expected_prev[1] !== 1'bx ) && ( ALU_OPR_prev[1] !== ALU_OPR_expected_prev[1] )
		&& ((ALU_OPR_expected_prev[1] !== last_ALU_OPR_exp[1]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OPR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OPR_expected_prev);
		$display ("     Real value = %b", ALU_OPR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OPR_exp[1] = ALU_OPR_expected_prev[1];
	end
	if (
		( ALU_OPR_expected_prev[2] !== 1'bx ) && ( ALU_OPR_prev[2] !== ALU_OPR_expected_prev[2] )
		&& ((ALU_OPR_expected_prev[2] !== last_ALU_OPR_exp[2]) ||
			on_first_change[1])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port ALU_OPR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", ALU_OPR_expected_prev);
		$display ("     Real value = %b", ALU_OPR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[1] = 1'b0;
		last_ALU_OPR_exp[2] = ALU_OPR_expected_prev[2];
	end
	if (
		( AR_load_expected_prev !== 1'bx ) && ( AR_load_prev !== AR_load_expected_prev )
		&& ((AR_load_expected_prev !== last_AR_load_exp) ||
			on_first_change[2])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port AR_load :: @time = %t",  $realtime);
		$display ("     Expected value = %b", AR_load_expected_prev);
		$display ("     Real value = %b", AR_load_prev);
		nummismatches = nummismatches + 1;
		on_first_change[2] = 1'b0;
		last_AR_load_exp = AR_load_expected_prev;
	end
	if (
		( BUS_data_sel_expected_prev !== 1'bx ) && ( BUS_data_sel_prev !== BUS_data_sel_expected_prev )
		&& ((BUS_data_sel_expected_prev !== last_BUS_data_sel_exp) ||
			on_first_change[3])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS_data_sel :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_data_sel_expected_prev);
		$display ("     Real value = %b", BUS_data_sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[3] = 1'b0;
		last_BUS_data_sel_exp = BUS_data_sel_expected_prev;
	end
	if (
		( BUS_sel_expected_prev[0] !== 1'bx ) && ( BUS_sel_prev[0] !== BUS_sel_expected_prev[0] )
		&& ((BUS_sel_expected_prev[0] !== last_BUS_sel_exp[0]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS_sel[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_sel_expected_prev);
		$display ("     Real value = %b", BUS_sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BUS_sel_exp[0] = BUS_sel_expected_prev[0];
	end
	if (
		( BUS_sel_expected_prev[1] !== 1'bx ) && ( BUS_sel_prev[1] !== BUS_sel_expected_prev[1] )
		&& ((BUS_sel_expected_prev[1] !== last_BUS_sel_exp[1]) ||
			on_first_change[4])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port BUS_sel[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", BUS_sel_expected_prev);
		$display ("     Real value = %b", BUS_sel_prev);
		nummismatches = nummismatches + 1;
		on_first_change[4] = 1'b0;
		last_BUS_sel_exp[1] = BUS_sel_expected_prev[1];
	end
	if (
		( D0_expected_prev !== 1'bx ) && ( D0_prev !== D0_expected_prev )
		&& ((D0_expected_prev !== last_D0_exp) ||
			on_first_change[5])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D0_expected_prev);
		$display ("     Real value = %b", D0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[5] = 1'b0;
		last_D0_exp = D0_expected_prev;
	end
	if (
		( D1_expected_prev !== 1'bx ) && ( D1_prev !== D1_expected_prev )
		&& ((D1_expected_prev !== last_D1_exp) ||
			on_first_change[6])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D1_expected_prev);
		$display ("     Real value = %b", D1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[6] = 1'b0;
		last_D1_exp = D1_expected_prev;
	end
	if (
		( D2_expected_prev !== 1'bx ) && ( D2_prev !== D2_expected_prev )
		&& ((D2_expected_prev !== last_D2_exp) ||
			on_first_change[7])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D2_expected_prev);
		$display ("     Real value = %b", D2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[7] = 1'b0;
		last_D2_exp = D2_expected_prev;
	end
	if (
		( D3_expected_prev !== 1'bx ) && ( D3_prev !== D3_expected_prev )
		&& ((D3_expected_prev !== last_D3_exp) ||
			on_first_change[8])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D3_expected_prev);
		$display ("     Real value = %b", D3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[8] = 1'b0;
		last_D3_exp = D3_expected_prev;
	end
	if (
		( D4_expected_prev !== 1'bx ) && ( D4_prev !== D4_expected_prev )
		&& ((D4_expected_prev !== last_D4_exp) ||
			on_first_change[9])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D4_expected_prev);
		$display ("     Real value = %b", D4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[9] = 1'b0;
		last_D4_exp = D4_expected_prev;
	end
	if (
		( D5_expected_prev !== 1'bx ) && ( D5_prev !== D5_expected_prev )
		&& ((D5_expected_prev !== last_D5_exp) ||
			on_first_change[10])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D5_expected_prev);
		$display ("     Real value = %b", D5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[10] = 1'b0;
		last_D5_exp = D5_expected_prev;
	end
	if (
		( D6_expected_prev !== 1'bx ) && ( D6_prev !== D6_expected_prev )
		&& ((D6_expected_prev !== last_D6_exp) ||
			on_first_change[11])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D6_expected_prev);
		$display ("     Real value = %b", D6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[11] = 1'b0;
		last_D6_exp = D6_expected_prev;
	end
	if (
		( D7_expected_prev !== 1'bx ) && ( D7_prev !== D7_expected_prev )
		&& ((D7_expected_prev !== last_D7_exp) ||
			on_first_change[12])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D7_expected_prev);
		$display ("     Real value = %b", D7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[12] = 1'b0;
		last_D7_exp = D7_expected_prev;
	end
	if (
		( D8_expected_prev !== 1'bx ) && ( D8_prev !== D8_expected_prev )
		&& ((D8_expected_prev !== last_D8_exp) ||
			on_first_change[13])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D8 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D8_expected_prev);
		$display ("     Real value = %b", D8_prev);
		nummismatches = nummismatches + 1;
		on_first_change[13] = 1'b0;
		last_D8_exp = D8_expected_prev;
	end
	if (
		( D9_expected_prev !== 1'bx ) && ( D9_prev !== D9_expected_prev )
		&& ((D9_expected_prev !== last_D9_exp) ||
			on_first_change[14])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D9 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D9_expected_prev);
		$display ("     Real value = %b", D9_prev);
		nummismatches = nummismatches + 1;
		on_first_change[14] = 1'b0;
		last_D9_exp = D9_expected_prev;
	end
	if (
		( D10_expected_prev !== 1'bx ) && ( D10_prev !== D10_expected_prev )
		&& ((D10_expected_prev !== last_D10_exp) ||
			on_first_change[15])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D10 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D10_expected_prev);
		$display ("     Real value = %b", D10_prev);
		nummismatches = nummismatches + 1;
		on_first_change[15] = 1'b0;
		last_D10_exp = D10_expected_prev;
	end
	if (
		( D11_expected_prev !== 1'bx ) && ( D11_prev !== D11_expected_prev )
		&& ((D11_expected_prev !== last_D11_exp) ||
			on_first_change[16])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D11 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D11_expected_prev);
		$display ("     Real value = %b", D11_prev);
		nummismatches = nummismatches + 1;
		on_first_change[16] = 1'b0;
		last_D11_exp = D11_expected_prev;
	end
	if (
		( D12_expected_prev !== 1'bx ) && ( D12_prev !== D12_expected_prev )
		&& ((D12_expected_prev !== last_D12_exp) ||
			on_first_change[17])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D12 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D12_expected_prev);
		$display ("     Real value = %b", D12_prev);
		nummismatches = nummismatches + 1;
		on_first_change[17] = 1'b0;
		last_D12_exp = D12_expected_prev;
	end
	if (
		( D13_expected_prev !== 1'bx ) && ( D13_prev !== D13_expected_prev )
		&& ((D13_expected_prev !== last_D13_exp) ||
			on_first_change[18])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D13 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D13_expected_prev);
		$display ("     Real value = %b", D13_prev);
		nummismatches = nummismatches + 1;
		on_first_change[18] = 1'b0;
		last_D13_exp = D13_expected_prev;
	end
	if (
		( D14_expected_prev !== 1'bx ) && ( D14_prev !== D14_expected_prev )
		&& ((D14_expected_prev !== last_D14_exp) ||
			on_first_change[19])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D14 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D14_expected_prev);
		$display ("     Real value = %b", D14_prev);
		nummismatches = nummismatches + 1;
		on_first_change[19] = 1'b0;
		last_D14_exp = D14_expected_prev;
	end
	if (
		( D15_expected_prev !== 1'bx ) && ( D15_prev !== D15_expected_prev )
		&& ((D15_expected_prev !== last_D15_exp) ||
			on_first_change[20])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port D15 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", D15_expected_prev);
		$display ("     Real value = %b", D15_prev);
		nummismatches = nummismatches + 1;
		on_first_change[20] = 1'b0;
		last_D15_exp = D15_expected_prev;
	end
	if (
		( DM_read_expected_prev !== 1'bx ) && ( DM_read_prev !== DM_read_expected_prev )
		&& ((DM_read_expected_prev !== last_DM_read_exp) ||
			on_first_change[21])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DM_read :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DM_read_expected_prev);
		$display ("     Real value = %b", DM_read_prev);
		nummismatches = nummismatches + 1;
		on_first_change[21] = 1'b0;
		last_DM_read_exp = DM_read_expected_prev;
	end
	if (
		( DM_write_expected_prev !== 1'bx ) && ( DM_write_prev !== DM_write_expected_prev )
		&& ((DM_write_expected_prev !== last_DM_write_exp) ||
			on_first_change[22])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port DM_write :: @time = %t",  $realtime);
		$display ("     Expected value = %b", DM_write_expected_prev);
		$display ("     Real value = %b", DM_write_prev);
		nummismatches = nummismatches + 1;
		on_first_change[22] = 1'b0;
		last_DM_write_exp = DM_write_expected_prev;
	end
	if (
		( IR_load_expected_prev !== 1'bx ) && ( IR_load_prev !== IR_load_expected_prev )
		&& ((IR_load_expected_prev !== last_IR_load_exp) ||
			on_first_change[24])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port IR_load :: @time = %t",  $realtime);
		$display ("     Expected value = %b", IR_load_expected_prev);
		$display ("     Real value = %b", IR_load_prev);
		nummismatches = nummismatches + 1;
		on_first_change[24] = 1'b0;
		last_IR_load_exp = IR_load_expected_prev;
	end
	if (
		( out_IM_expected_prev[0] !== 1'bx ) && ( out_IM_prev[0] !== out_IM_expected_prev[0] )
		&& ((out_IM_expected_prev[0] !== last_out_IM_exp[0]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_IM[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_IM_expected_prev);
		$display ("     Real value = %b", out_IM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_out_IM_exp[0] = out_IM_expected_prev[0];
	end
	if (
		( out_IM_expected_prev[1] !== 1'bx ) && ( out_IM_prev[1] !== out_IM_expected_prev[1] )
		&& ((out_IM_expected_prev[1] !== last_out_IM_exp[1]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_IM[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_IM_expected_prev);
		$display ("     Real value = %b", out_IM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_out_IM_exp[1] = out_IM_expected_prev[1];
	end
	if (
		( out_IM_expected_prev[2] !== 1'bx ) && ( out_IM_prev[2] !== out_IM_expected_prev[2] )
		&& ((out_IM_expected_prev[2] !== last_out_IM_exp[2]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_IM[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_IM_expected_prev);
		$display ("     Real value = %b", out_IM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_out_IM_exp[2] = out_IM_expected_prev[2];
	end
	if (
		( out_IM_expected_prev[3] !== 1'bx ) && ( out_IM_prev[3] !== out_IM_expected_prev[3] )
		&& ((out_IM_expected_prev[3] !== last_out_IM_exp[3]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_IM[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_IM_expected_prev);
		$display ("     Real value = %b", out_IM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_out_IM_exp[3] = out_IM_expected_prev[3];
	end
	if (
		( out_IM_expected_prev[4] !== 1'bx ) && ( out_IM_prev[4] !== out_IM_expected_prev[4] )
		&& ((out_IM_expected_prev[4] !== last_out_IM_exp[4]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_IM[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_IM_expected_prev);
		$display ("     Real value = %b", out_IM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_out_IM_exp[4] = out_IM_expected_prev[4];
	end
	if (
		( out_IM_expected_prev[5] !== 1'bx ) && ( out_IM_prev[5] !== out_IM_expected_prev[5] )
		&& ((out_IM_expected_prev[5] !== last_out_IM_exp[5]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_IM[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_IM_expected_prev);
		$display ("     Real value = %b", out_IM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_out_IM_exp[5] = out_IM_expected_prev[5];
	end
	if (
		( out_IM_expected_prev[6] !== 1'bx ) && ( out_IM_prev[6] !== out_IM_expected_prev[6] )
		&& ((out_IM_expected_prev[6] !== last_out_IM_exp[6]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_IM[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_IM_expected_prev);
		$display ("     Real value = %b", out_IM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_out_IM_exp[6] = out_IM_expected_prev[6];
	end
	if (
		( out_IM_expected_prev[7] !== 1'bx ) && ( out_IM_prev[7] !== out_IM_expected_prev[7] )
		&& ((out_IM_expected_prev[7] !== last_out_IM_exp[7]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_IM[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_IM_expected_prev);
		$display ("     Real value = %b", out_IM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_out_IM_exp[7] = out_IM_expected_prev[7];
	end
	if (
		( out_IM_expected_prev[8] !== 1'bx ) && ( out_IM_prev[8] !== out_IM_expected_prev[8] )
		&& ((out_IM_expected_prev[8] !== last_out_IM_exp[8]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_IM[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_IM_expected_prev);
		$display ("     Real value = %b", out_IM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_out_IM_exp[8] = out_IM_expected_prev[8];
	end
	if (
		( out_IM_expected_prev[9] !== 1'bx ) && ( out_IM_prev[9] !== out_IM_expected_prev[9] )
		&& ((out_IM_expected_prev[9] !== last_out_IM_exp[9]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_IM[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_IM_expected_prev);
		$display ("     Real value = %b", out_IM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_out_IM_exp[9] = out_IM_expected_prev[9];
	end
	if (
		( out_IM_expected_prev[10] !== 1'bx ) && ( out_IM_prev[10] !== out_IM_expected_prev[10] )
		&& ((out_IM_expected_prev[10] !== last_out_IM_exp[10]) ||
			on_first_change[29])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_IM[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_IM_expected_prev);
		$display ("     Real value = %b", out_IM_prev);
		nummismatches = nummismatches + 1;
		on_first_change[29] = 1'b0;
		last_out_IM_exp[10] = out_IM_expected_prev[10];
	end
	if (
		( out_IR_expected_prev[0] !== 1'bx ) && ( out_IR_prev[0] !== out_IR_expected_prev[0] )
		&& ((out_IR_expected_prev[0] !== last_out_IR_exp[0]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_IR[0] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_IR_expected_prev);
		$display ("     Real value = %b", out_IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_out_IR_exp[0] = out_IR_expected_prev[0];
	end
	if (
		( out_IR_expected_prev[1] !== 1'bx ) && ( out_IR_prev[1] !== out_IR_expected_prev[1] )
		&& ((out_IR_expected_prev[1] !== last_out_IR_exp[1]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_IR[1] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_IR_expected_prev);
		$display ("     Real value = %b", out_IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_out_IR_exp[1] = out_IR_expected_prev[1];
	end
	if (
		( out_IR_expected_prev[2] !== 1'bx ) && ( out_IR_prev[2] !== out_IR_expected_prev[2] )
		&& ((out_IR_expected_prev[2] !== last_out_IR_exp[2]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_IR[2] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_IR_expected_prev);
		$display ("     Real value = %b", out_IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_out_IR_exp[2] = out_IR_expected_prev[2];
	end
	if (
		( out_IR_expected_prev[3] !== 1'bx ) && ( out_IR_prev[3] !== out_IR_expected_prev[3] )
		&& ((out_IR_expected_prev[3] !== last_out_IR_exp[3]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_IR[3] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_IR_expected_prev);
		$display ("     Real value = %b", out_IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_out_IR_exp[3] = out_IR_expected_prev[3];
	end
	if (
		( out_IR_expected_prev[4] !== 1'bx ) && ( out_IR_prev[4] !== out_IR_expected_prev[4] )
		&& ((out_IR_expected_prev[4] !== last_out_IR_exp[4]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_IR[4] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_IR_expected_prev);
		$display ("     Real value = %b", out_IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_out_IR_exp[4] = out_IR_expected_prev[4];
	end
	if (
		( out_IR_expected_prev[5] !== 1'bx ) && ( out_IR_prev[5] !== out_IR_expected_prev[5] )
		&& ((out_IR_expected_prev[5] !== last_out_IR_exp[5]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_IR[5] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_IR_expected_prev);
		$display ("     Real value = %b", out_IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_out_IR_exp[5] = out_IR_expected_prev[5];
	end
	if (
		( out_IR_expected_prev[6] !== 1'bx ) && ( out_IR_prev[6] !== out_IR_expected_prev[6] )
		&& ((out_IR_expected_prev[6] !== last_out_IR_exp[6]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_IR[6] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_IR_expected_prev);
		$display ("     Real value = %b", out_IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_out_IR_exp[6] = out_IR_expected_prev[6];
	end
	if (
		( out_IR_expected_prev[7] !== 1'bx ) && ( out_IR_prev[7] !== out_IR_expected_prev[7] )
		&& ((out_IR_expected_prev[7] !== last_out_IR_exp[7]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_IR[7] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_IR_expected_prev);
		$display ("     Real value = %b", out_IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_out_IR_exp[7] = out_IR_expected_prev[7];
	end
	if (
		( out_IR_expected_prev[8] !== 1'bx ) && ( out_IR_prev[8] !== out_IR_expected_prev[8] )
		&& ((out_IR_expected_prev[8] !== last_out_IR_exp[8]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_IR[8] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_IR_expected_prev);
		$display ("     Real value = %b", out_IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_out_IR_exp[8] = out_IR_expected_prev[8];
	end
	if (
		( out_IR_expected_prev[9] !== 1'bx ) && ( out_IR_prev[9] !== out_IR_expected_prev[9] )
		&& ((out_IR_expected_prev[9] !== last_out_IR_exp[9]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_IR[9] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_IR_expected_prev);
		$display ("     Real value = %b", out_IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_out_IR_exp[9] = out_IR_expected_prev[9];
	end
	if (
		( out_IR_expected_prev[10] !== 1'bx ) && ( out_IR_prev[10] !== out_IR_expected_prev[10] )
		&& ((out_IR_expected_prev[10] !== last_out_IR_exp[10]) ||
			on_first_change[30])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port out_IR[10] :: @time = %t",  $realtime);
		$display ("     Expected value = %b", out_IR_expected_prev);
		$display ("     Real value = %b", out_IR_prev);
		nummismatches = nummismatches + 1;
		on_first_change[30] = 1'b0;
		last_out_IR_exp[10] = out_IR_expected_prev[10];
	end
	if (
		( OUTR_load_expected_prev !== 1'bx ) && ( OUTR_load_prev !== OUTR_load_expected_prev )
		&& ((OUTR_load_expected_prev !== last_OUTR_load_exp) ||
			on_first_change[36])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port OUTR_load :: @time = %t",  $realtime);
		$display ("     Expected value = %b", OUTR_load_expected_prev);
		$display ("     Real value = %b", OUTR_load_prev);
		nummismatches = nummismatches + 1;
		on_first_change[36] = 1'b0;
		last_OUTR_load_exp = OUTR_load_expected_prev;
	end
	if (
		( PC_count_en_expected_prev !== 1'bx ) && ( PC_count_en_prev !== PC_count_en_expected_prev )
		&& ((PC_count_en_expected_prev !== last_PC_count_en_exp) ||
			on_first_change[37])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port PC_count_en :: @time = %t",  $realtime);
		$display ("     Expected value = %b", PC_count_en_expected_prev);
		$display ("     Real value = %b", PC_count_en_prev);
		nummismatches = nummismatches + 1;
		on_first_change[37] = 1'b0;
		last_PC_count_en_exp = PC_count_en_expected_prev;
	end
	if (
		( Q_expected_prev !== 1'bx ) && ( Q_prev !== Q_expected_prev )
		&& ((Q_expected_prev !== last_Q_exp) ||
			on_first_change[38])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port Q :: @time = %t",  $realtime);
		$display ("     Expected value = %b", Q_expected_prev);
		$display ("     Real value = %b", Q_prev);
		nummismatches = nummismatches + 1;
		on_first_change[38] = 1'b0;
		last_Q_exp = Q_expected_prev;
	end
	if (
		( R0_ld_expected_prev !== 1'bx ) && ( R0_ld_prev !== R0_ld_expected_prev )
		&& ((R0_ld_expected_prev !== last_R0_ld_exp) ||
			on_first_change[39])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R0_ld :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R0_ld_expected_prev);
		$display ("     Real value = %b", R0_ld_prev);
		nummismatches = nummismatches + 1;
		on_first_change[39] = 1'b0;
		last_R0_ld_exp = R0_ld_expected_prev;
	end
	if (
		( R1_ld_expected_prev !== 1'bx ) && ( R1_ld_prev !== R1_ld_expected_prev )
		&& ((R1_ld_expected_prev !== last_R1_ld_exp) ||
			on_first_change[41])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R1_ld :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R1_ld_expected_prev);
		$display ("     Real value = %b", R1_ld_prev);
		nummismatches = nummismatches + 1;
		on_first_change[41] = 1'b0;
		last_R1_ld_exp = R1_ld_expected_prev;
	end
	if (
		( R2_ld_expected_prev !== 1'bx ) && ( R2_ld_prev !== R2_ld_expected_prev )
		&& ((R2_ld_expected_prev !== last_R2_ld_exp) ||
			on_first_change[43])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port R2_ld :: @time = %t",  $realtime);
		$display ("     Expected value = %b", R2_ld_expected_prev);
		$display ("     Real value = %b", R2_ld_prev);
		nummismatches = nummismatches + 1;
		on_first_change[43] = 1'b0;
		last_R2_ld_exp = R2_ld_expected_prev;
	end
	if (
		( SC_clear_expected_prev !== 1'bx ) && ( SC_clear_prev !== SC_clear_expected_prev )
		&& ((SC_clear_expected_prev !== last_SC_clear_exp) ||
			on_first_change[45])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port SC_clear :: @time = %t",  $realtime);
		$display ("     Expected value = %b", SC_clear_expected_prev);
		$display ("     Real value = %b", SC_clear_prev);
		nummismatches = nummismatches + 1;
		on_first_change[45] = 1'b0;
		last_SC_clear_exp = SC_clear_expected_prev;
	end
	if (
		( T0_expected_prev !== 1'bx ) && ( T0_prev !== T0_expected_prev )
		&& ((T0_expected_prev !== last_T0_exp) ||
			on_first_change[46])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T0 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T0_expected_prev);
		$display ("     Real value = %b", T0_prev);
		nummismatches = nummismatches + 1;
		on_first_change[46] = 1'b0;
		last_T0_exp = T0_expected_prev;
	end
	if (
		( T1_expected_prev !== 1'bx ) && ( T1_prev !== T1_expected_prev )
		&& ((T1_expected_prev !== last_T1_exp) ||
			on_first_change[47])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T1 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T1_expected_prev);
		$display ("     Real value = %b", T1_prev);
		nummismatches = nummismatches + 1;
		on_first_change[47] = 1'b0;
		last_T1_exp = T1_expected_prev;
	end
	if (
		( T2_expected_prev !== 1'bx ) && ( T2_prev !== T2_expected_prev )
		&& ((T2_expected_prev !== last_T2_exp) ||
			on_first_change[48])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T2 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T2_expected_prev);
		$display ("     Real value = %b", T2_prev);
		nummismatches = nummismatches + 1;
		on_first_change[48] = 1'b0;
		last_T2_exp = T2_expected_prev;
	end
	if (
		( T3_expected_prev !== 1'bx ) && ( T3_prev !== T3_expected_prev )
		&& ((T3_expected_prev !== last_T3_exp) ||
			on_first_change[49])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T3 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T3_expected_prev);
		$display ("     Real value = %b", T3_prev);
		nummismatches = nummismatches + 1;
		on_first_change[49] = 1'b0;
		last_T3_exp = T3_expected_prev;
	end
	if (
		( T4_expected_prev !== 1'bx ) && ( T4_prev !== T4_expected_prev )
		&& ((T4_expected_prev !== last_T4_exp) ||
			on_first_change[50])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T4 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T4_expected_prev);
		$display ("     Real value = %b", T4_prev);
		nummismatches = nummismatches + 1;
		on_first_change[50] = 1'b0;
		last_T4_exp = T4_expected_prev;
	end
	if (
		( T5_expected_prev !== 1'bx ) && ( T5_prev !== T5_expected_prev )
		&& ((T5_expected_prev !== last_T5_exp) ||
			on_first_change[51])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T5 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T5_expected_prev);
		$display ("     Real value = %b", T5_prev);
		nummismatches = nummismatches + 1;
		on_first_change[51] = 1'b0;
		last_T5_exp = T5_expected_prev;
	end
	if (
		( T6_expected_prev !== 1'bx ) && ( T6_prev !== T6_expected_prev )
		&& ((T6_expected_prev !== last_T6_exp) ||
			on_first_change[52])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T6 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T6_expected_prev);
		$display ("     Real value = %b", T6_prev);
		nummismatches = nummismatches + 1;
		on_first_change[52] = 1'b0;
		last_T6_exp = T6_expected_prev;
	end
	if (
		( T7_expected_prev !== 1'bx ) && ( T7_prev !== T7_expected_prev )
		&& ((T7_expected_prev !== last_T7_exp) ||
			on_first_change[53])
	)
	begin
		$display ("ERROR! Vector Mismatch for output port T7 :: @time = %t",  $realtime);
		$display ("     Expected value = %b", T7_expected_prev);
		$display ("     Real value = %b", T7_prev);
		nummismatches = nummismatches + 1;
		on_first_change[53] = 1'b0;
		last_T7_exp = T7_expected_prev;
	end

	trigger <= ~trigger;
end
initial 

begin 
$timeformat(-12,3," ps",6);
#1000000;
if (nummismatches > 0)
	$display ("%d mismatched vectors : Simulation failed !",nummismatches);
else
	$display ("Simulation passed !");
$finish;
end 
endmodule

module Enes_Sahin_2018510093_DEUNIAC_vlg_vec_tst();
// constants                                           
// general purpose registers
reg clk;
reg [3:0] input_InpR;
// wires                                               
wire [2:0] ALU_OPR;
wire AR_load;
wire BUS_data_sel;
wire [1:0] BUS_sel;
wire D0;
wire D1;
wire D2;
wire D3;
wire D4;
wire D5;
wire D6;
wire D7;
wire D8;
wire D9;
wire D10;
wire D11;
wire D12;
wire D13;
wire D14;
wire D15;
wire DM_read;
wire DM_write;
wire [3:0] InpR_out;
wire IR_load;
wire [3:0] out_alu;
wire [3:0] out_AR;
wire [3:0] out_BUS;
wire [3:0] out_DM;
wire [10:0] out_IM;
wire [10:0] out_IR;
wire [4:0] out_PC;
wire [2:0] out_SC;
wire [4:0] out_SM;
wire [3:0] out_SP;
wire [3:0] OutpR_out;
wire OUTR_load;
wire PC_count_en;
wire Q;
wire R0_ld;
wire [3:0] R0_out;
wire R1_ld;
wire [3:0] R1_out;
wire R2_ld;
wire [3:0] R2_out;
wire SC_clear;
wire T0;
wire T1;
wire T2;
wire T3;
wire T4;
wire T5;
wire T6;
wire T7;
wire V;

wire sampler;                             

// assign statements (if any)                          
Enes_Sahin_2018510093_DEUNIAC i1 (
// port map - connection between master ports and signals/registers   
	.ALU_OPR(ALU_OPR),
	.AR_load(AR_load),
	.BUS_data_sel(BUS_data_sel),
	.BUS_sel(BUS_sel),
	.clk(clk),
	.D0(D0),
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.D4(D4),
	.D5(D5),
	.D6(D6),
	.D7(D7),
	.D8(D8),
	.D9(D9),
	.D10(D10),
	.D11(D11),
	.D12(D12),
	.D13(D13),
	.D14(D14),
	.D15(D15),
	.DM_read(DM_read),
	.DM_write(DM_write),
	.InpR_out(InpR_out),
	.input_InpR(input_InpR),
	.IR_load(IR_load),
	.out_alu(out_alu),
	.out_AR(out_AR),
	.out_BUS(out_BUS),
	.out_DM(out_DM),
	.out_IM(out_IM),
	.out_IR(out_IR),
	.out_PC(out_PC),
	.out_SC(out_SC),
	.out_SM(out_SM),
	.out_SP(out_SP),
	.OutpR_out(OutpR_out),
	.OUTR_load(OUTR_load),
	.PC_count_en(PC_count_en),
	.Q(Q),
	.R0_ld(R0_ld),
	.R0_out(R0_out),
	.R1_ld(R1_ld),
	.R1_out(R1_out),
	.R2_ld(R2_ld),
	.R2_out(R2_out),
	.SC_clear(SC_clear),
	.T0(T0),
	.T1(T1),
	.T2(T2),
	.T3(T3),
	.T4(T4),
	.T5(T5),
	.T6(T6),
	.T7(T7),
	.V(V)
);

// clk
initial
begin
	repeat(33)
	begin
		clk = 1'b0;
		clk = #15000 1'b1;
		# 15000;
	end
	clk = 1'b0;
end 

Enes_Sahin_2018510093_DEUNIAC_vlg_sample_tst tb_sample (
	.clk(clk),
	.input_InpR(input_InpR),
	.sampler_tx(sampler)
);

Enes_Sahin_2018510093_DEUNIAC_vlg_check_tst tb_out(
	.ALU_OPR(ALU_OPR),
	.AR_load(AR_load),
	.BUS_data_sel(BUS_data_sel),
	.BUS_sel(BUS_sel),
	.D0(D0),
	.D1(D1),
	.D2(D2),
	.D3(D3),
	.D4(D4),
	.D5(D5),
	.D6(D6),
	.D7(D7),
	.D8(D8),
	.D9(D9),
	.D10(D10),
	.D11(D11),
	.D12(D12),
	.D13(D13),
	.D14(D14),
	.D15(D15),
	.DM_read(DM_read),
	.DM_write(DM_write),
	.InpR_out(InpR_out),
	.IR_load(IR_load),
	.out_alu(out_alu),
	.out_AR(out_AR),
	.out_BUS(out_BUS),
	.out_DM(out_DM),
	.out_IM(out_IM),
	.out_IR(out_IR),
	.out_PC(out_PC),
	.out_SC(out_SC),
	.out_SM(out_SM),
	.out_SP(out_SP),
	.OutpR_out(OutpR_out),
	.OUTR_load(OUTR_load),
	.PC_count_en(PC_count_en),
	.Q(Q),
	.R0_ld(R0_ld),
	.R0_out(R0_out),
	.R1_ld(R1_ld),
	.R1_out(R1_out),
	.R2_ld(R2_ld),
	.R2_out(R2_out),
	.SC_clear(SC_clear),
	.T0(T0),
	.T1(T1),
	.T2(T2),
	.T3(T3),
	.T4(T4),
	.T5(T5),
	.T6(T6),
	.T7(T7),
	.V(V),
	.sampler_rx(sampler)
);
endmodule

